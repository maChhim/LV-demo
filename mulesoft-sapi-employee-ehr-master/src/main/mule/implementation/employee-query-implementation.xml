<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd">
	<sub-flow name="compound-employee-condition-builder-flow" doc:id="5378589b-b24b-4d02-98ca-7a2794651b34" >
<json-logger:logger doc:name="Start Logger" doc:id="81ec9d5f-1297-43c9-9d11-86835dcc575f" config-ref="JSON_Logger_Config" message="Start of query choice flow" category="${log.external.categoryAdditivityEnabled}">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    transactionId: JSONLoggerModule::stringifyNonJSON(vars.transactionId) 
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Check URI Params Content" doc:id="fa25a882-f469-4028-bf54-d96e037cd584">
		<!-- SPAD-9128 -->
			<when expression='#[output application/json indent = false --- &#10;&#10;(not isEmpty(vars.startDate)) and (not isEmpty(vars.company))]'>
				<ee:transform doc:name="Generate WHERE clause" doc:id="d5ba7b95-cb76-4795-83ae-7009d42e400c" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="condition" ><![CDATA[%dw 2.0
output application/json indent = false
---
"start_date >= to_date('$(vars.startDate)', 'yyyy-MM-dd') and company = '$(vars.company)'"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: startDate and company" doc:id="556058fe-b730-402c-93f0-a5a57607c022" config-ref="JSON_Logger_Config" message="Choice route: has startDate and company" tracePoint="FLOW" category="${log.external.categoryAdditivityEnabled}" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<when expression='#[output application/json indent = false --- &#10;&#10;((not isEmpty(vars.lastModifiedDateTime)) and (vars.queryType == "period-based") and (vars.entity == "global"))]'>
				<ee:transform doc:name="Generate WHERE clause" doc:id="00a71fdd-e4ac-4eef-adc2-1d2df904ec87" >
					<ee:message />
					<ee:variables >
						<ee:set-variable variableName="condition" ><![CDATA[%dw 2.0
output application/json indent = false
---
"last_modified_on > to_datetime('$(vars.lastModifiedDateTime)') AND fromDate = to_date('$(vars.effectiveDate)','YYYY-MM-DD') AND toDate = to_date('$(vars.effectiveDate)','YYYY-MM-DD')"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: LastModifiedDateTime and is period based" doc:id="8279f50c-20c6-4fbe-9ba6-2e233d2cbe2b" config-ref="JSON_Logger_Config" message="Choice route: period-based without region" tracePoint="FLOW" category="${log.external.categoryAdditivityEnabled}">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			

</when>
			<when expression='#[output application/json indent = false ---&#10;&#10;((not isEmpty(vars.lastModifiedDateTime)) and (vars.queryType == "period-based") and not isEmpty(vars.employeeId))]'>
				<ee:transform doc:name="Generate WHERE clause" doc:id="2500f8c0-8eb2-4af5-a7dd-0ae6af9b18f6" >
					<ee:message />
					<ee:variables >
						<ee:set-variable variableName="condition" ><![CDATA[%dw 2.0
output application/json indent = false
---
"last_modified_on > to_datetime('$(vars.lastModifiedDateTime)') AND fromDate = to_date('$(vars.effectiveDate)','YYYY-MM-DD') AND toDate = to_date('$(vars.effectiveDate)','YYYY-MM-DD') AND person_id_external = '$(vars.employeeId)'"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: LastModifiedDateTime, period based, has employee ID" doc:id="2e670e96-4c11-4409-8231-2751729deee2" config-ref="JSON_Logger_Config" message="Choice route: LastModifiedDateTime, period based, has employee ID" tracePoint="FLOW" category="${log.external.categoryAdditivityEnabled}" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<when expression='#[output application/json indent = false --- &#10;&#10;((not isEmpty(vars.lastModifiedDateTime)) and (vars.queryType == "period-based"))]'>
				<ee:transform doc:name="Generate WHERE clause" doc:id="3cf09cd1-cb4d-499f-85e4-feafa802497c" >
					<ee:message />
					<ee:variables >
						<ee:set-variable variableName="condition" ><![CDATA[%dw 2.0
output application/json indent = false
---
"last_modified_on > to_datetime('$(vars.lastModifiedDateTime)') AND fromDate = to_date('$(vars.effectiveDate)','YYYY-MM-DD') AND toDate = to_date('$(vars.effectiveDate)','YYYY-MM-DD') AND company_territory_code = '$(vars.region)'"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: LastModifiedDateTime and is period based" doc:id="0c0f5141-c8d6-4da2-b8d2-f8b3092ed786" config-ref="JSON_Logger_Config" message="Choice route: LastModifiedDateTime and is period based" tracePoint="FLOW" category="${log.external.categoryAdditivityEnabled}">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			

</when>
			<when expression="#[output application/json indent = false --- &#10;&#10;((not isEmpty(vars.employeeId)) and (not isEmpty(vars.lastModifiedDateTime)))]">
				<ee:transform doc:name="Generate WHERE clause" doc:id="c0b36274-8fbd-477d-8a7f-c1b6b0c0def0" >
					<ee:message />
					<ee:variables >
						<ee:set-variable variableName="condition" ><![CDATA[%dw 2.0
output application/json indent = false
---
"last_modified_on > to_datetime('$(vars.lastModifiedDateTime)') and person_id_external = '$(vars.employeeId)' and hiringNotCompleted = 'false'"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: Has ID and LastModifiedDateTime" doc:id="e5b932bb-be03-4c9f-817e-1cd32f2a2ea2" config-ref="JSON_Logger_Config" message="Choice route: Has ID and LastModifiedDateTime" tracePoint="FLOW" category="${log.external.categoryAdditivityEnabled}">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			

</when>
			<when expression="#[output application/json indent = false --- not isEmpty(vars.employeeId)]">
				<ee:transform doc:name="Generate WHERE clause" doc:id="37b4b7df-3e38-4a29-8405-13c4da169f41">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="condition"><![CDATA[%dw 2.0
output application/json indent = false
---
"person_id_external = '$(vars.employeeId)'"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: Has ID" doc:id="b81d1c85-77bf-40d8-8669-7a4af924c1cd" config-ref="JSON_Logger_Config" message="Choice route: Has ID" category="${log.external.categoryAdditivityEnabled}" tracePoint="FLOW">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			

</when>
			<when expression="#[output application/json indent = false --- &#10;&#10;((not isEmpty(vars.region)) and (not isEmpty(vars.lastModifiedDateTime)))]">
				<ee:transform doc:name="Generate WHERE clause" doc:id="bd9a246c-756b-46f1-b077-c6fe75268852">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="condition"><![CDATA[%dw 2.0
output application/json indent = false
---
"last_modified_on > to_datetime('$(vars.lastModifiedDateTime)') and company_territory_code = '$(vars.region)' and hiringNotCompleted = 'false'"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: Has Region &amp; LastModifiedDateTime" doc:id="edd24012-b4d4-4a90-ad1d-c32e2ee526d1" config-ref="JSON_Logger_Config" message="Choice route: Has Region &amp; LastModifiedDateTime" category="${log.external.categoryAdditivityEnabled}" tracePoint="FLOW">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<when expression="#[output application/json indent = false --- &#10;&#10;(isEmpty(vars.region) and (not isEmpty(vars.lastModifiedDateTime)))]">
				<ee:transform doc:name="Generate WHERE clause" doc:id="d913327e-e61b-4322-86b4-5c37b70e72b2">
					<ee:message>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="condition"><![CDATA[%dw 2.0
output application/json indent = false
---
"last_modified_on > to_datetime('$(vars.lastModifiedDateTime)') and hiringNotCompleted = 'false'"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Choice route: Has BLANK Region &amp; LastModifiedDateTime" doc:id="633478e8-77a9-45b7-b14a-768bb06ea758" config-ref="JSON_Logger_Config" message="Choice route: Has BLANK Region &amp; LastModifiedDateTime" category="${log.external.categoryAdditivityEnabled}" tracePoint="FLOW">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: JSONLoggerModule::stringifyNonJSON(vars.condition) 
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise>
				<json-logger:logger doc:name="No Choice Found" doc:id="57b18915-3edd-4019-9d1f-a773a582fc52" config-ref="JSON_Logger_Config" message="No Choice Found" category="${log.external.categoryAdditivityEnabled}" tracePoint="FLOW">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    checkCondtion: "Invalid Request" 
}]]]></json-logger:content>
				</json-logger:logger>
				<raise-error doc:name="EMPLOYEE_EHR_SAPI:NOT_FOUND" doc:id="342e8862-6d96-4b8f-81e7-c0bc13879a2b" type="EMPLOYEE_EHR_SAPI:NOT_FOUND" />
			
</otherwise>
		</choice>
		<ee:transform doc:name="Generate queryparams" doc:id="eec57c0f-ba10-46e5-a4ba-f11ed40caac7">
					<ee:message />
					<ee:variables>
				<ee:set-variable resource="dwl/queryParamsList.dwl" variableName="queryParamsList" />
					
</ee:variables>
				</ee:transform>
		<json-logger:logger doc:name="End Logger" doc:id="e5830e19-1e02-4acb-9016-c3f4b169099a" config-ref="JSON_Logger_Config" message="End of query choice flow" category="${log.external.categoryAdditivityEnabled}" tracePoint="END">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json indent = false ---
{
    transactionId: JSONLoggerModule::stringifyNonJSON(vars.transactionId) 
}]]]></json-logger:content>
		</json-logger:logger>
		<flow-ref doc:name="compound-employee-login-implemenation-flow" doc:id="4b0c0f3d-c96e-4136-a211-c265c698c65a" name="compound-employee-login-implemenation-flow" />
	</sub-flow>
</mule>