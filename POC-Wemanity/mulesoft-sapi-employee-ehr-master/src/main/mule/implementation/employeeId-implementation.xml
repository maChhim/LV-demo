<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<sub-flow name="employeeId-implementationSub_Flow" doc:id="5cd7cdd6-11ea-473f-b2fe-e7970dee25e8" >
		<json-logger:logger doc:name="Start Employee ID Post" doc:id="6ac7c933-3306-4aac-b7a7-b51bfcadb532" config-ref="JSON_Logger_Config" message="Start Employee ID Post" priority="DEBUG" category="com.louisvuitton.technical">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
		</json-logger:logger>
		<set-variable value="#[payload]" doc:name="originMessage" doc:id="8c264493-3318-4633-8a15-628a8af283b3" variableName="originMessage"/>
		<choice doc:name="Is Odata Input ? " doc:id="ead8a241-796d-4d50-b09f-18b48edd2d6e" >
			<when expression='#[!isEmpty(payload."__metadata")]'>
				<http:request method="POST" doc:name="Upsert ODATA Employee Request" doc:id="b5969f99-2e61-41ad-a364-a8f4ed9f7d8d" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]" />
				<ee:transform doc:name="Convert response to JSON" doc:id="45cef323-d834-4b47-b85a-9f61c539bbd1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Set Picklist Table" doc:id="ee0eba6c-ec04-4886-b5da-4038da6e566e">
					<ee:message />
					<ee:variables>
						<ee:set-variable resource="dwl/employee-id-picklist.dwl" variableName="picklist" />
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="6a61bbd1-17c5-4d31-a979-71497845d9d2" name="mapping-picklist-compound-to-odata-eu"/>
				<set-variable value='#[if (payload.person.person_id_external startsWith  "CHN") payload.person.person_id_external else payload.person.person_id_external_previous]' doc:name="backgroundUserId" doc:id="d42dea3c-e774-43f6-b48a-7f2e916b8da9" variableName="backgroundUserId"/>
				<flow-ref doc:name="generation-person-id-external" doc:id="bb4e97c0-103c-4958-bea9-4cfd0687cb46" name="generation-person-id-external"/>
				<set-payload value="#[vars.originMessage]" doc:name="originMessage" doc:id="b673e8f3-f8d3-4866-9a62-78d8ee8aebd5" />
				<ee:transform doc:name="Prepare Payload &amp; Set Variable originalMessage &amp; defaultPayload" doc:id="7a36be72-ca72-4f23-b193-c9f5f6d1097a">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable resource="dwl/employeeOdataQuery.dwl" variableName="originalMessage"></ee:set-variable>
						<ee:set-variable variableName="defaultPayload"><![CDATA[%dw 2.0
output application/json
---
{}
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<http:request method="POST" doc:name="Employee User Post Request" doc:id="c55caa4c-38de-4718-b8f9-50c21147caa3" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[vars.originalMessage.userInfo]]]></http:body>
		</http:request>
				<flow-ref doc:name="Update lvmjohndoe in local" doc:id="26f9f142-f2e6-4d0e-a948-cc7079ef1418" name="update-lvmjohndoe-global-to-local"/>
				<set-variable value="#[userInfoResponse: payload]" doc:name="Initialize responseList" doc:id="753c1c54-ebda-4430-aa69-d1ef86236448" variableName="responseList" />
				<flow-ref doc:name="odata-request-subflow" doc:id="a4044c58-3ae2-4c19-93a8-dd7b2faa2455" name="odata-request-subflow" />
				<choice doc:name="Any Background Entity ? " doc:id="ac9a79a7-3bca-4d7b-b593-4bbcb5d67990">
					<when expression="#[!isEmpty(vars.originMessage.odata)]">
						<flow-ref doc:name="additional-odata-request" doc:id="b3fb4931-1d89-4f24-a0c7-2f6247e96a8f" name="additional-odata-request" />
					</when>
					<otherwise >
						<json-logger:logger doc:name="Skip Upsert Background Entities" doc:id="cb4991fe-c24f-44a4-a371-8d6adbdeb93c" config-ref="JSON_Logger_Config" message='#["Skip Upsert Background Entities - No Data"]' priority="DEBUG" tracePoint="FLOW" category="com.louisvuitton.technical">
							<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
						</json-logger:logger>
					</otherwise>
				</choice>
				<ee:transform doc:name="Convert payload to Aggregated Odata Response" doc:id="80baf4ad-f69a-45e4-b40c-8db581dbb0f0">
			<ee:message>
						<ee:set-payload resource="dwl/convert-odata-payload.dwl" />
			</ee:message>
		</ee:transform>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="End Employee ID Post" doc:id="c27749fa-3247-49d4-8c40-6ddda5d8e802" config-ref="JSON_Logger_Config" message="End Employee ID Post" tracePoint="END" priority="DEBUG" category="com.louisvuitton.technical">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
		</json-logger:logger>
	</sub-flow>
	<sub-flow name="update-employee-implementationSub_Flow" doc:id="e26161a4-e6f1-4233-beeb-ba0abbcd41f5" >
		<json-logger:logger doc:name="Start Employee ID Put" doc:id="5ee30c47-628c-4ed3-b5f4-31f225b00ff0" config-ref="JSON_Logger_Config" message="Start Employee ID Put/Patch" priority="DEBUG" category="com.louisvuitton.technical" >
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
		</json-logger:logger>
		<set-variable value="#[payload]" doc:name="originMessage" doc:id="c5ad4557-d62b-4d3c-a408-bcd9cecdb917" variableName="originMessage"/>
		<set-variable value='#[(payload.person.person_id_external) default ""]' doc:name="person_id_external" doc:id="90e90e78-2693-4285-8312-e21103a5ab9a" variableName="person_id_external"/>
		<choice doc:name="Is Odata Input ? " doc:id="dda6d6a0-2c60-4bf3-bca0-aa537fd20093" >
			<when expression='#[!isEmpty(payload."__metadata")]'>
				<http:request method="POST" doc:name="Upsert ODATA Employee Request" doc:id="75e5fa0e-3dfd-4d7e-afa4-4807cfd879f3" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]" >
				</http:request>
				<ee:transform doc:name="Convert response to JSON" doc:id="da3dabde-10b0-4f46-8349-fddec701a1cc" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="Set Picklist Table" doc:id="d9cd8ba9-292f-4b0c-9f60-3ccc8c07d303">
					<ee:message />
					<ee:variables>
						<ee:set-variable resource="dwl/employee-id-picklist.dwl" variableName="picklist" />
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="4f047927-cc64-4caa-aa85-ff5d4bc9260c" name="mapping-picklist-compound-to-odata-eu"/>
				<set-variable value='#[if (payload.person.person_id_external startsWith  "CHN") payload.person.person_id_external else payload.person.person_id_external_previous]' doc:name="backgroundUserId" doc:id="360224d9-31af-4f6e-94d5-40a601f8635d" variableName="backgroundUserId" />
				<flow-ref doc:name="generation-person-id-external" doc:id="edc6117d-c625-498d-9d71-70e48e1fe9ba" name="generation-person-id-external" />
				<set-payload value="#[vars.originMessage]" doc:name="originMessage" doc:id="38cd5b83-1762-4302-b5b3-3444777e5a26" />
				<ee:transform doc:name="Prepare Payload &amp; Set Variable originalMessage &amp; defaultPayload" doc:id="d139201c-78fd-42c5-b9a3-44cca4741b14">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable resource="dwl/employeeOdataQuery.dwl" variableName="originalMessage"></ee:set-variable>
						<ee:set-variable variableName="defaultPayload" ><![CDATA[%dw 2.0
output application/json
---
{}
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<set-variable value="#[{}]" doc:name="Initialize responseList" doc:id="3c99e35f-5b62-4a70-bccb-14e1295ce2a5" variableName="responseList" />
				<flow-ref doc:name="odata-request-subflow" doc:id="633bd02a-c806-4a47-b87e-86c66ba14621" name="odata-request-subflow" />
				<choice doc:name="Any Background Entities ?" doc:id="2db1eb61-18bc-49ea-a091-056c211a19d6">
					<when expression="#[!isEmpty(vars.originMessage.odata)]">
						<ee:transform doc:name="Prepare Background Entities Payload" doc:id="b1035751-9396-453c-a697-5f351e6f9d8c">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<flow-ref doc:name="additional-odata-request" doc:id="f0a31d75-70a7-40e3-8cc7-1fbe91d713fa" name="additional-odata-request" />
					</when>
					<otherwise >
						<json-logger:logger doc:name='Skip Upsert Background Entities ' doc:id="770fd69b-5c99-4c64-8106-341ff236f5c2" config-ref="JSON_Logger_Config" message='#["Skip Upsert Background Entities - No Data"]' tracePoint="FLOW" priority="DEBUG" category="com.louisvuitton.technical">
							<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
						</json-logger:logger>
					</otherwise>
				</choice>
				<ee:transform doc:name="Convert payload to Aggregated Odata Response" doc:id="ca8da75f-4fd6-4d42-a776-b1a30d4c83aa">
			<ee:message>
						<ee:set-payload resource="dwl/convert-odata-payload2.dwl" />
			</ee:message>
		</ee:transform>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="End Employee ID Put" doc:id="6198d037-b479-4a13-a64b-617fedcb72ae" config-ref="JSON_Logger_Config" message="End Employee ID Post" tracePoint="END" priority="DEBUG" category="com.louisvuitton.technical" >
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
		</json-logger:logger>
	</sub-flow>
	<sub-flow name="odata-request-subflow" doc:id="f4d9771a-46e9-43e1-9585-a9b2fdd6ce6b" >
		<http:request method="POST" doc:name="Employee PerPerson Post Request" doc:id="818b24ab-aa41-4fe6-80da-2af5e11a98d4" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body ><![CDATA[#[vars.originalMessage.personInfo default vars.defaultPayload]]]></http:body>
		</http:request>
		<ee:transform doc:name="Append Response" doc:id="ce8229af-6a26-4004-9c35-7b7c909beea3" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="responseList" ><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ (personInfoResponse:  payload default "")]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<http:request method="POST" doc:name="Employee EmpEmployment Post Request" doc:id="1a1e8459-4cb6-472e-845d-8cccaef93bbf" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[vars.originalMessage.employment default vars.defaultPayload]]]></http:body>
		</http:request>
		<ee:transform doc:name="Append Response" doc:id="c976394b-dafe-42af-bedb-fda753e1549a">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ empEmployment: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<foreach doc:name="For Each  jobInfo" doc:id="39995886-761a-4128-9264-7f3e378e07dd" collection="#[vars.originalMessage.jobInfo default [{}]]">
			<set-variable value="#[&quot;personIdExternal eq '&quot; ++ (payload.managerId default &quot;&quot;) ++ &quot;'&quot;]" doc:name="setFilter" doc:id="46e6fc95-8bc4-43fc-b33f-1d823ee653bd" variableName="setFilter" />
			<flow-ref doc:name="get-user-id" doc:id="731e851f-b3a9-4f77-9a76-e11fe3c88a90" name="get-user-id" />
			<ee:transform doc:name="replace Manager User Id" doc:id="59f33b20-6ccb-409b-ba53-aaedef23507c">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload update {
       case .managerId -> vars.user_id
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<ee:transform doc:name="Transform Message" doc:id="6cad2a44-dba3-41f0-a8c6-64c5c455a781" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
if (payload.probationPeriodEndDate != null) payload else 
payload ++ "probationPeriodEndDate": null]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<http:request method="POST" doc:name="Employee EmpJob Post Request" doc:id="b18fad7c-baba-4446-9ff8-09d674956474" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
		</http:request>
			<ee:transform doc:name="Append Response" doc:id="de03975f-bbc9-4c43-9576-990b58154d93">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ jobInfoResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		</foreach>
		<http:request method="POST" doc:name="Employee EmpEmploymentTermination Post Request" doc:id="0d181190-d3ae-4489-b577-e1cad48ad087" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[vars.originalMessage.termination[0] default vars.defaultPayload]]]></http:body>
		</http:request>
		<ee:transform doc:name="Append Response" doc:id="08d7c62d-8f37-4cc9-acc9-88f12c931f15">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ termination: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<foreach doc:name="For Each PerPersonal" doc:id="7f302c0e-b91f-42f8-b4fa-4f63433f9bdc" collection="#[vars.originalMessage.personalInfo default [{}]]">
			<ee:transform doc:name="Set Picklist Table" doc:id="1382d643-a0b1-4371-93f9-7d9ae39e460e">
				<ee:message />
				<ee:variables>
					<ee:set-variable variableName="picklist" ><![CDATA[%dw 2.0
output application/json skipNullOn = "everywhere"
fun isNotNull(data)= (data != null and data != "")

---
[
    (ecMaritalStatus : payload.maritalStatus) if (isNotNull(payload.maritalStatus)),
    (ISOCountryList: payload.nationality)  if (isNotNull(payload.nationality)),
    (ISOCountryList: payload.secondNationality)  if (isNotNull(payload.second_nationality))
] filter ($ != {})

]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="4df4901c-9848-4373-942d-0fbedbb1507c" name="mapping-picklist-compound-to-odata-eu" />
			<ee:transform doc:name="Inject mapped Picklist values" doc:id="7ecb54dc-d24d-458f-be95-3650408b5507">
				<ee:message>
					<ee:set-payload resource="dwl/inject-CN-values-perPersonal.dwl" />
				</ee:message>
			</ee:transform>
			<http:request method="POST" doc:name="Employee PerPersonal Post Request" doc:id="97bc4ee3-f69b-4ab0-b07a-b226317fd322" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
			<ee:transform doc:name="Append Response" doc:id="cb40a003-68f3-43e2-98db-28bea15dc2e3">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ personalInfoResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		</foreach>
		<http:request method="POST" doc:name="Employee PerEmail Post Request" doc:id="1a4e0646-66bb-4a3b-8cbb-997224c040c1" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body ><![CDATA[#[vars.originalMessage.emailInfo default vars.defaultPayload]]]></http:body>
		</http:request>
		<ee:transform doc:name="Append Response" doc:id="35e10bb5-0c58-4077-aa75-ae3952dccb74">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ emailInfoResponse : payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<http:request method="POST" doc:name="Employee PerPhone Post Request" doc:id="e87a62d0-60a3-43f4-aaa7-655898a40a58" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body ><![CDATA[#[vars.originalMessage.phoneInfo default vars.defaultPayload]]]></http:body>
		</http:request>
		<ee:transform doc:name="Append Response" doc:id="e8d8a85b-2fd1-413a-a064-96a933a42f6c">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ phoneInfoResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<foreach doc:name="For Each EmpCompensation" doc:id="a41e3942-0721-422e-b70f-1ad36fea27ee" collection="#[vars.originalMessage.employmentCompensation default [{}]]">
				<ee:transform doc:name="Set Picklist Table" doc:id="94310f68-3578-453f-bf00-afecac200496">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="picklist"><![CDATA[%dw 2.0
output application/json skipNullOn = "everywhere"
fun isNotNull(data)= (data != null and data != "")


---
[
    (Rsnforpaychange: payload.customString1) if isNotNull(payload.customString1),
    (Commission: payload.customString3) if isNotNull(payload.customString3)

] filter ($ != {})
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="01667823-8d3f-400f-aa57-093cff955aa5" name="mapping-picklist-compound-to-odata-eu" />
				<ee:transform doc:name="mapped Picklist values" doc:id="59fc7ffc-f1db-424a-a3ca-b23b47e9a55d">
					<ee:message>
					<ee:set-payload resource="injetc-CN-values-empComp.dwl" />
					</ee:message>
				</ee:transform>
			<http:request method="POST" doc:name="Employee EmpCompensation Post Request" doc:id="20126c25-6461-4d5b-bd2f-bfaefb26d770" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
			<ee:transform doc:name="Append Response" doc:id="d69588b8-7949-48a2-8207-2c7fa8169364">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ compensationInfoResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			</foreach>
		<foreach doc:name="For Each EmpPayCompReccuring" doc:id="c35c4430-a256-4755-95c0-0bac13086b84" collection="#[vars.originalMessage.employmentPayCompReccuring default vars.defaultPayload]">
			<http:request method="POST" doc:name="Employee EmpPayCompReccuring Post Request" doc:id="8498f592-41ad-4c7d-94e6-c7b0610906c6" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="correlationId">
		</http:request>
			<ee:transform doc:name="Append Response" doc:id="79744bb6-6c4f-44be-9dde-b71fbf1fa95e">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ compensationRecuringResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		</foreach>
		<foreach doc:name="For Each EmpJobRelationships" doc:id="22d48640-f01c-43ba-a0fc-574e69676b6e" collection="#[vars.originalMessage.jobRelationship default vars.defaultPayload]">
			<set-variable value="#[&quot;personIdExternal eq '&quot; ++ (payload.relUserId default &quot;&quot;) ++ &quot;'&quot;]" doc:name="setFilter" doc:id="fc48124f-82c0-48f2-aa5d-9cd00c6f891e" variableName="setFilter" />
			<flow-ref doc:name="get-user-id" doc:id="42a41f2e-adda-48e8-863b-e720c858f6c6" name="get-user-id"/>
			<ee:transform doc:name="replace Manager User Id" doc:id="0408dedc-3b1a-44b6-b5e2-7d62b17d67df" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload update {
       case .relUserId -> vars.user_id
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<http:request method="POST" doc:name="Employee EmpJobRelationships Post Request" doc:id="30c89524-1a0c-4615-b999-3365836648dc" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="correlationId">
		</http:request>
			<ee:transform doc:name="Append Response" doc:id="c6811f59-7b5e-4047-ae12-6f18d184e1db">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ jobRelationshipResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		</foreach>
	</sub-flow>
	<sub-flow name="additional-odata-request" doc:id="a1e33440-95c9-4cd6-9720-379a24502168" >
		<try doc:name="Try" doc:id="ee11e1dd-8cd6-4fcc-a3a5-4ee2b9602342">
			<foreach doc:name="For Each cust_Tax_ID_Information" doc:id="aef85388-0c29-43df-860b-091f9f613343" collection="#[vars.originalMessage.cust_Tax_ID_Information default [{}]]">
			<http:request method="POST" doc:name="Employee cust_Tax_ID_Information Post Request" doc:id="745499f7-5255-4de1-a475-87ef7c768c29" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
			<ee:transform doc:name=" Append Response" doc:id="f29a8ac0-f6c4-472c-9978-de65a9418792">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ taxIDInfoResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		</foreach>
			</try>
		<try doc:name="Try" doc:id="13529b55-26e3-4a87-8654-ef3e4a31dfe8" >
			<foreach doc:name="For Each cust_LeaveNotice" doc:id="7edd8552-0e8e-4021-8440-737aa183dbea" collection="#[vars.originalMessage.cust_LeaveNotice default [{}]]">
			<http:request method="POST" doc:name="Employee cust_LeaveNotice Post Request" doc:id="40d2acd2-f0c9-4556-b153-c0e120e9bfd2" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
			<ee:transform doc:name=" Append Response" doc:id="9e3f7ee5-960f-40f9-9477-a7eb0bf08a57">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ leaveNoticeResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		</foreach>
		</try>
		<try doc:name="Try" doc:id="c54cfd50-f3b8-4638-a7d2-450f8f39bb99" >
			<set-variable value='#["/odata/v2/Background_Education"]' doc:name="Set backgroundPath" doc:id="e2c6a0ca-c015-4db0-8473-597e0a895fdc" variableName="backgroundPath"/>
			<flow-ref doc:name="delete-background-informations" doc:id="90c33843-cf98-463b-b734-8152c1435b54" name="delete-background-informations"/>
			<foreach doc:name="For Each Background_Education" doc:id="a3745209-74de-441b-b31b-8268e81ca528" collection="#[vars.originalMessage.Background_Education default [{}]]">
				<ee:transform doc:name="Set Picklist Table" doc:id="3936cc0e-374e-4c03-bbdd-98befa4feec9">
					<ee:message />
					<ee:variables>
						<ee:set-variable variableName="picklist" ><![CDATA[%dw 2.0
output application/json skipNullOn = "everywhere"
fun isNotNull(data)= (data != null and data != "")

---
[
    (ISOCountryList : payload.country) if (isNotNull(payload.country)),
    (major : payload.major) if (isNotNull(payload.major)),
    (school : payload.school) if (isNotNull(payload.school)),
    (degree: payload.degree)  if (isNotNull(payload.degree))
] filter ($ != {})
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="b80578fa-60f9-42f7-a621-34686f0eb9ac" name="mapping-picklist-compound-to-odata-eu" />
				<ee:transform doc:name="Inject mapped CN values" doc:id="a2d19b6c-9e60-4039-87a3-db5ab4fd2868" >
					<ee:message >
						<ee:set-payload resource="dwl/inject-CN-values.dwl" />
					</ee:message>
				</ee:transform>
				<http:request method="POST" doc:name="Employee Background_Education Post Request" doc:id="3f3ff0ca-8258-4459-9aad-2523dc26421a" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
				<ee:transform doc:name=" Append Response" doc:id="8395d1d0-54af-4265-8847-7253b47a2ee7">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ formalEducationResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			</foreach>
		</try>
		<try doc:name="Try" doc:id="b9922b50-5767-42f4-824f-7fe42e6db388" >
			<set-variable value='#["/odata/v2/Background_OutsideWorkExperience"]' doc:name="Set backgroundPath" doc:id="6591c297-073e-4ff7-b1f8-fc63767f0a5f" variableName="backgroundPath" />
			<flow-ref doc:name="delete-background-informations" doc:id="531121cb-9bf3-4eb0-9afc-49b737ff0886" name="delete-background-informations" />
			<foreach doc:name="For Each Background_OutsideWorkExperience " doc:id="db1bd831-9c99-4075-a7f1-1a5e8d2ee4fa" collection="#[vars.originalMessage.Background_OutsideWorkExperience default [{}]]">
				<ee:transform doc:name="Set picklist Table" doc:id="a80a9b44-3b6c-4b81-8c73-5153c85f6170" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="picklist" ><![CDATA[%dw 2.0
output application/json skipNullOn = "everywhere"
fun isNotNull(data)= (data != null and data != "")

---
[
    (ISOCountryList : payload.custom2) if (isNotNull(payload.custom2)),
    (jobJohnDoe : payload.custom3) if (isNotNull(payload.custom3)),
    (industry : payload.custom1) if (isNotNull(payload.custom1))
] filter ($ != {})]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="d9b98ede-a4fb-4167-9fb2-bbed4c25b6d3" name="mapping-picklist-compound-to-odata-eu" />
				<ee:transform doc:name="Inject Mapped CN Values" doc:id="e341d9eb-76cd-48cd-8f29-2233d1bc0649" >
					<ee:message >
						<ee:set-payload resource="dwl/inject-CN-values2.dwl" />
					</ee:message>
				</ee:transform>
				<http:request method="POST" doc:name="Employee Background_OutsideWorkExperience Post Request" doc:id="76e1dd65-37f4-4bc7-9c41-f6c193523f19" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
				<ee:transform doc:name=" Append Response" doc:id="c7c9d4ef-6f17-412c-ad2c-60acf8a8b1b9">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ externalWorkExperienceResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			</foreach>
		</try>
		<try doc:name="Try" doc:id="30c10866-9feb-4a91-b6c6-97793660e72a" >
			<set-variable value='#["/odata/v2/Background_InsideWorkExperience"]' doc:name="Set backgroundPath" doc:id="3b2e4f46-3e6a-4141-ae70-e1be2aa60179" variableName="backgroundPath" />
			<flow-ref doc:name="delete-background-informations" doc:id="222a721b-9e88-4af0-a2ba-20e2ec87df94" name="delete-background-informations" />
			<foreach doc:name="For Each Background_InsideWorkExperience" doc:id="3cce100d-6ea5-4599-9b21-1c3370da0cb0" collection="#[vars.originalMessage.Background_InsideWorkExperience default [{}]]">
				<ee:transform doc:name="Set picklist Table" doc:id="ca272482-b267-45f4-be9f-3c5db1d94461">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="picklist" ><![CDATA[%dw 2.0
output application/json skipNullOn = "everywhere"
fun isNotNull(data)= (data != null and data != "")

---
[
    (ISOCountryList : payload.country) if (isNotNull(payload.country)),
    (jobJohnDoe : payload.function) if (isNotNull(payload.function))
    
] filter ($ != {})]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="5fabde57-e0ef-4f52-a13f-23a8275dcd7b" name="mapping-picklist-compound-to-odata-eu" />
				<ee:transform doc:name="Inject Mapped CN Values" doc:id="f123cfc9-3053-4063-8f52-2e4931251b91">
					<ee:message>
						<ee:set-payload resource="dwl/inject-CN-values3.dwl" />
					</ee:message>
				</ee:transform>
				<http:request method="POST" doc:name="Employee Background_InsideWorkExperience Post Request" doc:id="a550846a-a53e-4817-8168-e163725b8adb" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
				<ee:transform doc:name=" Append Response" doc:id="f7227e3b-0f0e-4dd8-99fd-e37ad865814f">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ internalWorkExperienceResponse : payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			</foreach>
		</try>
		<try doc:name="Try" doc:id="ef0f83f3-3cc5-41d5-9efa-20101d06bcca" >
			<set-variable value='#["/odata/v2/Background_Languages"]' doc:name="Set backgroundPath" doc:id="da158457-fe68-467b-8da0-a73660f966fb" variableName="backgroundPath" />
			<flow-ref doc:name="delete-background-informations" doc:id="5641c041-60c9-48dc-8aa2-4f3178449fea" name="delete-background-informations" />
			<foreach doc:name="For Each Background_Languages" doc:id="5ced3f6c-3888-4b59-ac4e-4668e7f8e798" collection="#[vars.originalMessage.Background_Languages default [{}]]">
				<ee:transform doc:name="Set picklist Table" doc:id="1f5ded68-fde5-43cd-9764-933284c19307">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="picklist" ><![CDATA[%dw 2.0
output application/json skipNullOn = "everywhere"
fun isNotNull(data)= (data != null and data != "")

---
[
    (language : payload.language) if (isNotNull(payload.language)),
    (fluency : payload.speakingProf) if (isNotNull(payload.speakingProf))
    
] filter ($ != {})]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<flow-ref doc:name="mapping-picklist-compound-to-odata-eu" doc:id="be74bb52-15af-401d-a5de-2c9d3191b213" name="mapping-picklist-compound-to-odata-eu" />
				<ee:transform doc:name="Inject Mapped CN Values" doc:id="bdcc5578-60fd-4410-83f4-ae60cbb41679">
					<ee:message>
						<ee:set-payload resource="dwl/inject-CN-values4.dwl" />
					</ee:message>
				</ee:transform>
				<http:request method="POST" doc:name="Employee Background_Languages Post Request" doc:id="ea26a33f-1055-4004-bed1-27ce6ea55d49" config-ref="HTTP_Request_odata" path="${ehr.emID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[payload default vars.defaultPayload]]]></http:body>
		</http:request>
				<ee:transform doc:name=" Append Response" doc:id="9b02c546-b31d-4030-a7de-bc5b733490cd">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="responseList"><![CDATA[%dw 2.0
output application/json
---
vars.responseList ++ languageSkillsResponse: payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			</foreach>
		</try>
	</sub-flow>
	<sub-flow name="mapping-picklist-compound-to-odata-eu" doc:id="7ad13668-9bc6-456b-8eae-1f79acc796f4" >
		<json-logger:logger doc:name="Start Mapping Picklist Data Global" doc:id="cd2f56fd-c734-4dbc-a4a4-18202673838d" config-ref="JSON_Logger_Config" message='#["Start Mapping Picklist Data Global"]' priority="DEBUG" category="com.louisvuitton.technical">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Any picklist values ?" doc:id="c46f6015-e21f-44c3-8511-de82eb32865a" >
			<when expression="#[!isEmpty(vars.picklist)]">
				<set-variable value="#[output application/json
&#10;---
&#10;{}]" doc:name="Initialize globalValues" doc:id="8d8e135a-5526-493c-9567-da6d4f9ad2ce" variableName="globalValues"/>
				<foreach doc:name="For Each" doc:id="6f00bfb1-c970-46ed-b1c9-48c215056c6c" collection="#[vars.picklist]">
					<set-variable value="#[output application/java
&#10;---
&#10;&quot;PickListV2_id eq '&quot; ++(keysOf(payload)[0] ++ &quot;' and externalCode eq '&quot; ++ valuesOf(payload)[0]) ++ &quot;'&quot;]" doc:name="setFilter" doc:id="deccc60e-12ca-4d88-b9dd-3d60f2eaee7d" variableName="setFilter" />
					<http:request method="GET" doc:name="Request Picklist Value" doc:id="de8e1cb7-0e25-419a-a76f-86998576e6d8" config-ref="HTTP_Request_odata" path="${ehr.cityCode.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:query-params><![CDATA[#[output application/java
---
{
	'\$filter' : vars.setFilter,
	'\$select' : "optionId,PickListV2_id"
}]]]></http:query-params>
		</http:request>
					<set-variable value="#[output application/json
&#10;---
&#10;vars.globalValues ++ { ((payload.d.results.'PickListV2_id'[0]): payload.d.results.optionId[0]) }]" doc:name="globalValues" doc:id="c41c0fc8-b491-48ec-80e3-3e4383a67140" variableName="globalValues"/>
				</foreach>
				<json-logger:logger doc:name="End Mapping Picklist Data Global - Successful" doc:id="3acef619-872c-44a8-8dbc-c1824f8807af" config-ref="JSON_Logger_Config" message="End Mapping Picklist Data Global - Successful" priority="DEBUG" tracePoint="END" category="com.louisvuitton.technical">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise >
				<json-logger:logger doc:name="Skip Mapping Data Global" doc:id="4ec0a776-d740-40b7-835e-1275fdbf8a12" config-ref="JSON_Logger_Config" message='#["No mapping values from China to Global required"]' priority="DEBUG" tracePoint="END" category="com.louisvuitton.technical">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="generation-person-id-external" doc:id="1030c7b5-e68a-4a85-923d-0a2d73f458cc" >
		<json-logger:logger doc:name="Start Generation person_id_external" doc:id="3f8a3ea8-a170-4959-840a-597d49819c1d" config-ref="JSON_Logger_Config" message='#["Start Generation Start Generation person_id_external"]' priority="DEBUG" category="com.louisvuitton.technical" >
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice:  LVJohnDoe Code allready generated. " doc:id="2864f582-1d6f-4bb2-a8fc-a3bae9c15078" >
			<when expression='#[payload.person.person_id_external startsWith  "LVJohnDoe"]'>
				<set-variable value="#[payload.person.person_id_external]" doc:name="Set person_id_external" doc:id="4aa590e2-2b53-4705-bf13-f584e8f61e7b" variableName="person_id_external" />
				<set-variable value="#[&quot;personIdExternal eq '&quot; ++ vars.person_id_external ++ &quot;'&quot;]" doc:name="setFilter" doc:id="93a1be75-f4a3-44bc-9d2c-02b3ebfb6781" variableName="setFilter"/>
				<flow-ref doc:name="get-user-id" doc:id="0ad2ccf5-4992-4d5b-af3c-a6e1b6c0cba4" name="get-user-id"/>
			</when>
			<otherwise>
				<http:request method="POST" doc:name="Employee generateNextPersonID" doc:id="f3e2e000-b257-4949-b88c-f57f8ba39d7d" config-ref="HTTP_Request_odata" path="${ehr.generateNextPersonID.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
		</http:request>
				<set-variable value='#["LVJohnDoe" ++ payload.d.GenerateNextPersonIDResponse.personID]' doc:name="Set person_id_external" doc:id="e0f1908b-7e42-4ae7-bafb-8aa8f3202a2f" variableName="person_id_external" />
				<set-variable value="#[vars.person_id_external]" doc:name="Set user_id" doc:id="b0cad12d-aa20-4f1a-b5d5-b78b8758c819" variableName="user_id"/>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="End Generation person_id_external" doc:id="508cd7cc-b577-4ade-921e-4bd1ab6a2d3b" config-ref="JSON_Logger_Config" message='#["End Generation person_id_external"]' priority="DEBUG" category="com.louisvuitton.technical" tracePoint="END">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
		</json-logger:logger>
	</sub-flow>
	<sub-flow name="get-user-id" doc:id="adf0c6b1-cd1a-4884-a541-569658d6171b" >
		<http:request method="GET" doc:name="Employee UserId Get Request" doc:id="3ed11f85-09a2-4f2c-9e0e-2f6cc38b8ee4" config-ref="HTTP_Request_odata" path="${ehr.userId.path}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]" target="user_id" targetValue="#[payload.d.results.userId[0]]">
			<http:query-params ><![CDATA[#[output application/java
---
{
	'\$filter' : vars.setFilter,
	'\$select' : "userId"
}]]]></http:query-params>
		</http:request>
	</sub-flow>
	<sub-flow name="update-lvmjohndoe-global-to-local" doc:id="ed8d3012-d4b2-4c39-98e1-f0c7d5d7b567" >
		<choice doc:name="LVJohnDoe Code propagation" doc:id="565c1994-41bf-4a65-886a-792a5c4cc929" >
			<when expression='#[vars.originMessage.person.person_id_external startsWith  "LVJohnDoe"]' >
				<json-logger:logger doc:name="LVJohnDoeCode Already in local" doc:id="59ebb08c-4a69-4f49-accd-51868fc8bd18" config-ref="JSON_Logger_Config" message='"LVJohnDoeCode Already in local"' priority="DEBUG" category="com.louisvuitton.technical">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise>
				<http:request method="PUT" doc:name="Update new LVJohnDoeCode in local" doc:id="04eca61a-8b66-4429-9392-799dcc420e6a" config-ref="HTTP_Request_configuration_struct_emp_sapi_hrcn" path="/employees/{backgroundUserId}">
			<http:body><![CDATA[#[{
	"useCase": "updateLVJohnDoe",
	"userId": vars.backgroundUserId, //old userID from what we send to you 
	"personIdExternal": vars.person_id_external // new person id external the you created
}]]]></http:body>
					<http:uri-params><![CDATA[#[output application/java
---
{
	"backgroundUserId" : vars.backgroundUserId
}]]]></http:uri-params>
		</http:request>
				<json-logger:logger doc:name='"Put LVJohnDoeCode to local"' doc:id="1b07acdf-4ea5-4a5c-bf86-d243ce28b6b8" config-ref="JSON_Logger_Config" message='"Put LVJohnDoeCode to local"' priority="DEBUG" category="com.louisvuitton.technical" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="delete-background-informations" doc:id="c7b3fcaf-9cf1-4619-893c-5b39c73b0469" >
		<set-variable value="#[output application/java
&#10;---
&#10;&quot;userId eq '&quot; ++ vars.person_id_external ++ &quot;'&quot;]" doc:name="setFilter" doc:id="53df66df-3ee0-4d1a-beb1-91578b91875f" variableName="setFilter" />
		<http:request method="GET" doc:name="Employee Background_Education Get Request" doc:id="59135b3e-cc97-4ec2-ad66-685f98b3ad42" config-ref="HTTP_Request_odata" path="#[vars.backgroundPath]" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:query-params><![CDATA[#[output application/java
---
{
	'\$filter' : vars.setFilter
}]]]></http:query-params>
		</http:request>
		<choice doc:name="Choice" doc:id="b8ec0bad-c525-4af1-9f97-895a9092d884" >
			<when expression="#[payload.d.results.backgroundElementId != null]">
				<foreach doc:name="For Each backgroundElementId " doc:id="0d232d5f-06b0-4a70-ba5f-c86d489e3c18" collection="#[payload.d.results.backgroundElementId default [{}]]">
			<set-variable value='#[output application/java
&#10;---
&#10;"json"]' doc:name="setFormat" doc:id="a999597e-e3ba-4345-96db-1d9848ade2dd" variableName="setFormat" />
			<ee:transform doc:name="set backgroundPath" doc:id="cf26fad9-b652-4de5-974d-6d54c9f7f8cd">
				<ee:message>
				</ee:message>
				<ee:variables>
							<ee:set-variable variableName="backgroundPathDelete" ><![CDATA[%dw 2.0
output application/json
---
vars.backgroundPath ++ "(backgroundElementId=" ++ payload ++ ", userId='" ++ vars.person_id_external ++ "')"]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<http:request method="DELETE" doc:name="Employee Background Delete Request" doc:id="a65dba0f-b607-4792-bb02-b577185b891c" config-ref="HTTP_Request_odata" path="#[vars.backgroundPathDelete]" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
				<http:query-params><![CDATA[#[output application/java
---
{
	'\$format' : vars.setFormat
}]]]></http:query-params>
			</http:request>
		</foreach>
			</when>
			<otherwise >
				<json-logger:logger doc:name="Skip Delete Background" doc:id="9c4e3319-733c-4830-9cc0-18b7c730a024" config-ref="JSON_Logger_Config" message='#["Skip Delete Background"]' tracePoint="END" category="com.louisvuitton.technical" priority="DEBUG">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule
output application/json
---
{
  api: {
    id: "${api.id}",
    assetVersion: "${log.external.api.assetVersion}",
    name: "${log.external.api.exchangeName}",
    appName: "${log.external.application.name}",
    domain: "${log.external.businessGroup}",
    environment: "${mule.env}"
  },
  request: {
    timestamp: now(),
    headers: vars.messageKeys default {},
	body: JSONLoggerModule::stringifyAny(payload),
  },
  response: {
    timestamp: now(),
    (if(not isEmpty(error.description)) (errorDescription: error.description) else (body: JSONLoggerModule::stringifyAny(payload)) )		
	}
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	</sub-flow>
</mule>
